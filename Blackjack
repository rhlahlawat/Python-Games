# Mini-project  - Blackjack

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 0
message = ""

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}



# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
            # create Hand object
        self.hand = []
        self.Ace_counter = 0
        self.value = 0  
        self.hand_detail = ""
        
    def __str__(self):
            # return a string representation of a hand
        self.hand_detail = "Hand contains "
        for crd in self.hand:
            self.hand_detail += str(crd) + " "
        return self.hand_detail
    
    def add_card(self, card):
            # add a card object to a hand
        self.hand.append(card)
        
    def get_value(self):
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
            # compute the value of the hand, see Blackjack video  
        self.Ace_counter = 0
        self.value = 0            
        for crd in self.hand:
            if crd.get_suit() in SUITS and crd.get_rank() in RANKS:
                if crd.get_rank() == RANKS[0]:
                    self.Ace_counter += 1
                self.value += VALUES[crd.get_rank()]
        if self.Ace_counter == 0:
            return self.value
        else:
            if self.value + 10 <= 21:
                self.value += 10
                return self.value
            else:
                return self.value

                
    def draw(self, canvas, pos):
            # draw a hand on the canvas, use the draw method for cards
        for crd in self.hand:
            card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(crd.get_rank()), 
                        CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(crd.get_suit()))
  
            #crd.draw(canvas,pos)
                   
            if in_play:
                if pos[0] == 100 and pos[1] == 200:
                    canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE, [100 + CARD_CENTER[0], 200 + CARD_CENTER[1]], CARD_BACK_SIZE)
                else:
                    crd.draw(canvas,pos)
            else:
                crd.draw(canvas,pos)
            pos[0] += CARD_SIZE[0]+10  
            
        
# define deck class 
class Deck:
    def __init__(self):
            # create a Deck object
        self.deck = []
        self.deck_detail = ""
        for suit in SUITS:
            for rank in RANKS:
                self.deck.append(Card(suit,rank))
                
    def shuffle(self):
        # shuffle the deck 
            # use random.shuffle()
        random.shuffle(self.deck)

    def deal_card(self):
            # deal a card object from the deck
            return self.deck.pop(-1)

    def __str__(self):
            # return a string representing the deck
        self.deck_detail = "Hand contains "
        for crd in self.deck:
            self.deck_detail += str(crd) + " "
        return self.deck_detail
        

        

#define event handlers for buttons
def deal():
    global outcome, in_play, score, message
    global p1, d1, dck
    
    dck = Deck()
    p1 = Hand()
    d1 = Hand()
    # your code goes here
    dck.shuffle()
    outcome = ""
    if in_play:
        score -= 1
        in_play = False
        
    
    message = "Hit or Stand ?"

    d1.add_card(dck.deal_card())
    p1.add_card(dck.deal_card())
    d1.add_card(dck.deal_card())
    p1.add_card(dck.deal_card())
    in_play = True
    
def hit():
        # replace with your code below
    # if the hand is in play, hit the player
    global outcome, in_play, score
    
    if in_play:
        if p1.get_value() <= 21:
            p1.add_card(dck.deal_card())
    # if busted, assign a message to outcome, update in_play and score
        player_value = p1.get_value()
        if player_value > 21:
            outcome = "You have busted"
            message = "New deal !"
            in_play = False
            score -= 1
    
        
def stand():
        # replace with your code below
    global in_play, outcome, score, message
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more        
    if in_play:
        while d1.get_value() <= 17:
            d1.add_card(dck.deal_card())
        player_value = p1.get_value()
        dealer_value = d1.get_value()
        if dealer_value > 21:
            outcome = "You Won"
            score += 1
            in_play = False
            message = "New deal !"
        else:
            if dealer_value >= player_value:
                outcome = "You Lose"
                score -= 1
                in_play = False
                message = "New deal !"
            else:
                outcome = "You Won"
                score += 1
                in_play = False
                message = "New deal !"           
    # assign a message to outcome, update in_play and score

    
# draw handler    
def draw(canvas):
    # test to make sure that card.draw works, replace with your code below
    canvas.draw_text("Blackjack",(140, 	100), 50, 'Blue')
    canvas.draw_text("Score: " + str(score),(460, 120), 30, 'Black')
    canvas.draw_text(outcome,(240, 180), 30, 'White')
    
    canvas.draw_text("Dealer",(100, 180), 30, 'Black')    
    d1.draw(canvas, [100, 200])
    canvas.draw_text(message,(240, 380), 30, 'White')
    canvas.draw_text("Player",(100, 380), 30, 'Black')    
    p1.draw(canvas, [100, 400])
    

# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


# get things rolling
deal()
frame.start()


# remember to review the gradic rubric
